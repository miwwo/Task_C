"""
Каждый класс реализовать в отдельном модуле, импортируя их в производные модули.
Создать класс Person с полями имя, фамилия, возраст. Добавить конструктор класса.
Создать производный от Person класс Student. Новые поля: класс, дневник
    (словарь словарей вида предмет: {дата : отметка}). Определить конструктор, с вызовом родительского конструктора.
    Определить функции добавления отметки в дневник, получения всех отметок по предмету,
    форматированной печати всего дневника. Переопределить метод преобразования в строку для печати
    основной информации (ФИ, возраст, класс).
Создать производный от Person класс Teacher. Новые поля: номер кабинета, преподаваемые
    предметы (словарь вида класс: список предметов). Определить конструктор, с вызовом родительского конструктора.
    Определить функции изменения кабинета, добавления и удаления предмета. Переопределить метод преобразования
    в строку для печати основной информации (ФИ, возраст, номер кабинета, предметы).
Создать класс Class. Поля: номер rкласса, список класса (список экземпляров класса Student), классный руководитель
    (экземпляр класса Teacher). Определить конструктор. Переопределить метод преобразования в строку для печати
    всей информации о классе (с использованием переопределения в классах Teacher и Student). Переопределить
    методы получения количества учеников функцией len, получения ученика/учителя по индексу, изменения
    по индексу, удаления по индексу (0 индекс - учитель, начиная с 1 - ученики). Переопределить
    операции + и - для добавления или удаления ученика из группы. Добавить функцию создания txt-файла и записи
    всей информации в него (в том числе дневников учеников).
Предусмотреть хотя бы в 3 местах обработку возможных исключений.
В каждом модуле провести подробное тестирование всех создаваемых объектов и функций.
"""

class Person:
    def __init__(self, name, surname, age):
        self.name = name
        self.surname = surname
        self.age = age

class Student(Person):
    def __init__(self, name, surname, age, clas):
        Person.__init__(self, name, surname, age)
        self.clas = clas
        self.journal = {}

    def addmark(self,subject, date, mark):
        self.journal[subject] = {date:mark}
        print("Вы успешно добавили запись в дневник! ",self.journal)

    def getmarks(self,subject):
        print("Введите название предмета: ")
        subj = input()
        for x in self.journal:
            if x == subj:
                print(x,":",self.journal[x])
#def Teacther(Person):

def student():
    print("Введите имя: ")
    name = input()
    print("Введите фамилию: ")
    surname = input()
    print("Введите возраст: ")
    age = int(input())
    print("Введите класс: ")
    clas = int(input())
    Student.__init__(name, surname, age, clas)
    print("Функции, доступные Вам для работе с учеником:",
          "1 - Добавить отметку",
          "2 - Вывести все отметки по определенному предмету",
          "3 - Форматированная печать всего дневника",
          "Введите ноль, чтобы закончить работу программы. ", sep="\n")
    menu = int(input())
    while True:
        if menu == 1:
            print("Введите название предмета: ")
            subject = input()
            print("Введите дату получения отметки: ")
            date = input()
            print("Введите отметку: ")
            mark = int(input())
            Student.addmark(subject, date, mark)

       # elif menu == 2:
        #elif menu == 3:
        #elif menu == 0:
           # break


def main():
    while True:
        print("Функции, доступные Вам:",
              "1 - Добавить ученика",
              "2 - Добавить учителя",
              "3 - Добавить класс",
              "Введите ноль, чтобы закончить работу программы. ", sep="\n")
        menu = int(input())
        if menu == 1:
            student()
        #elif menu == 2:

        #elif menu == 3:

        #elif menu == 0:
            #break

if __name__=="__main__":
    main()